#!/bin/bash

usage() {
    [ -n "$1" ] && echo "$1"
    echo "usage: $0 <package> <tag>"
    echo "if <tag> == "", use github, else googlecode"
}

no_dir() {
    svn info $1 2>&1 | grep -q "Not a valid URL"
}

[ "$1" == "" -o "$2" == "" ] && usage

## we pull stuff from http://$PACK.googlecode.com/svn
## or git@github.com:massemanet/$PACK.git
## we want stuff either from .../trunk[/stuff] or .../tags/Tag
## if $2 is trunk[/stuff] we set SRC to .../$2 and REV to the revision#
## else, we set SRC to .../tags/$2 and REV to $2

PACK=$1

if [ "$2" == "" ]; then
    GITHUB=git@github.com:massemanet/$PACK.git
    SRC=$GITHUB
    REV=`date --rfc-3339=date`
else
    GOOGLE=http://$PACK.googlecode.com/svn
    if echo "$2" | grep -Eq "^trunk"; then
        SRC=$GOOGLE/$2
        REV="r"`svn info $SRC | grep Revision | grep -Eo "[0-9]+"`
    else
        REV=$2
        SRC=$GOOGLE/tags/$REV
    fi
    if no_dir $SRC; then usage; fi
fi

TMP=/tmp/kvendor_$$
[ -e $TMP ] && rm -rf $TMP

#BASE=svn+ssh://svn@svn.hq.kred/kreditor
BASE=https://svn.hq.kred/repos/kreditor
VENDOR_CURRENT=$BASE/$PACK/vendor/current
VENDOR_PRE_CURRENT=$BASE/$PACK/vendor/pre_current
VENDOR_TRUNK=$BASE/$PACK/trunk

## get the good stuff from the internet
if [ "$GITHUB" == "" ]; then
    echo "  Exporting from google to vendor/current..."
    svn export --force $SRC $TMP
else    
    echo "  Exporting from github to vendor/current..."
    GTMP=/tmp/g-$$
    [ -e $GTMP ] && rm -rf $GTMP
    if (mkdir $GTMP ; cd $GTMP ; git clone $SRC .); then
        (cd $GTMP; git archive --format=tar master | tar -C $TMP -xf -)
        rm -rf $GTMP
    else
        echo "No such repo: $SRC"
        exit
    fi
fi

## in the kreditor repo, we want 
## $PACK/vendor/current, $PACK/vendor/$TAG & $PACK/trunk

if no_dir $VENDOR_CURRENT ;then 
    svn mkdir --parents $VENDOR_CURRENT -m"new vendor"
    init="true"
else
    init="false"
fi

# we assume that vendor/current is what's currently in vendor/trunk
# we want to merge like this;
# svn merge vendor/pre_current vendor/current trunk_wc
# where vendor/pre_current is vendor/current as it was before the new drop
echo "copying vendor/current to vendor/pre_current"
if svn ls $VENDOR_PRE_CURRENT >& /dev/null; then
    svn rm  $VENDOR_PRE_CURRENT -m"copying vendor/current to pre_current"
fi
svn cp $VENDOR_CURRENT $VENDOR_PRE_CURRENT -m"copying vendor/current to pre_current"

echo "  Checking out vendor/current..."
svn co $VENDOR_CURRENT $TMP
if [ "$init" == "false" ]; then
    for f in `find $TMP -type f -name "[a-zA-Z]*" | grep -v ".svn"`; do
	rm $f
    done
fi

ADDED=`svn st $TMP | egrep "^\?" | cut -c8-`
for a in $ADDED; do
    svn add $a
done

echo "  Checking in vendor/current..."
svn ci $TMP -m"vendor drop $REV"

echo "  Tagging vendor/current..."
svn cp -m"tagging vendor drop $REV" \
    $VENDOR_CURRENT \
    $BASE/$PACK/vendor/$REV

if no_dir $VENDOR_TRUNK ;then 
    svn mkdir --parents $VENDOR_TRUNK -m"new vendor"
fi

[ -e $TMP ] && rm -rf $TMP
echo "  Checking out vendor/trunk..."
svn co $VENDOR_TRUNK $TMP

echo "  Merging diff between vendor/pre_current & current into vendor/trunk..."
svn merge $VENDOR_PRE_CURRENT $VENDOR_CURRENT $TMP

echo "  Resolving tree conflicts..."
TREE_CS=`svn st $TMP | egrep "^\!     C" | cut -c8-`
for a in $TREE_CS; do
    svn resolve --accept working $a
done

echo "Checking in vendor/trunk..."
svn ci $TMP -m"upgraded to $PACK $REV from $SRC"
