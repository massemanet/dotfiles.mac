  BI export

 the goal of the Business Intelligence function is to export a set of
 variables from Klarna Online to an external SQL data base. The export
 machinery should allow for two modes of operation;

1) full export mode, where we iterate over everything in KO
2) transaction log event driven mode, where variables are exported in real-time

 The semantics of the variables should not change over time (it's
 defined by the source contract), but the underlying data will
 change. Therefore, the calculation of the variable must be
 well-contained and easy to modify.

 In order to implement the trans log mode, a variable must export a
 description of which tables it depends on.

 The architecture looks like this;

   V1 V2 ..
   |  |
  bi_engine
   |    |
  kdb  driver -- SQL

  The bi_engine is responsible for getting the appropriate data from
  kdb, and for the communication with the SQL DB (through an
  appropriate driver).

  The variables are implemented as objects with 2 attributes; a
  function that calculates the value of the variable given the
  appropriate input data, and a description of the required input
  data. That description is used by the engine, both to deduce which
  variables need to be recalculated for a given change to the data
  base, and to actually extract the required input data.

  Example; KO has two tables, a_table and b_table. a_table contains #a
  records, and b_table #b records. Each #a contains a val field and a
  bs field. #a.bs contains a list of b_table keys. #b also has a val
  field, as well as an a field. #b.a has a key to a_table. So each #a
  points to a number of #b, and each #b points to one #a.

  We want to calculate the sum of #a.val and the sum of double of
  #b.val for all the #b's pointed to by #a. That's unproblematic given
  an #a. A problem is that a change to b_table should also trigger a
  recalculation of our variable.

  The BI Variable Object (BIVO) would look like this;

  {fun(A,Bs) ->
       A#a.val + lists:sum([2*B#b.val || B <- Bs])
   end,
   [[{'A',a_table},
     {'Bs',b_table,['A',#a.field_bs]}],
    [{'B',b_table},
     {'A',a_table,['B',#b.field_a]},
     {'Bs',b_table,['A',#a.field_bs]}]]}.

  It a tuple with two elements; a function that calculates the value
  of the variable, and a description of its input data. The function
  takes two variables, A (an #a) and Bs (a list of #b). The
  calculation is straight-forward.

  The second element of the tuple describes how A and B are bound for
  the two cases; a change to a_table or to b_table.
